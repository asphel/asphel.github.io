(window.mazWebpack=window.mazWebpack||[]).push([["lazy_images_parser"],{qyf3:function(t,r,e){"use strict";e.r(r);var n=e("eoez");function o(t){return function(t){if(Array.isArray(t))return a(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,r){if(!t)return;if("string"==typeof t)return a(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return a(t,r)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}r.default=function(t){var r,e,a=document.querySelectorAll(".lazyload-js"),i=document.querySelectorAll(".lazyload-picture-js"),c={rootMargin:"50px 0px",threshold:.01};function s(t){var r=t.getAttribute("data-src");r&&(t.src=r,t.onload=function(){t.parentNode.classList.add("img-lazyloaded")})}function u(t){t.map(function(t){t.isIntersecting&&(r.unobserve(t.target),s(t.target))})}function l(t){t.map(function(t){t.intersectionRatio>0&&(e.unobserve(t.target),function(t){var r=t.getAttribute("data-src"),e=t.getAttribute("data-srcset");r&&(n.a.get("isIE11")?t.src=t.getAttribute("data-src")+"?"+(new Date).getTime():t.src=t.getAttribute("data-src")),e&&(t.srcset=t.getAttribute("data-srcset")),t.complete?t.closest(".lazyload-picture-container").classList.add("img-lazyloaded"):t.onload=function(){t.closest(".lazyload-picture-container").classList.add("img-lazyloaded")}}(t.target))})}a&&("IntersectionObserver"in window?(r=new IntersectionObserver(u,{rootMargin:"0px 0px 50px 0px",threshold:0}),o(a).map(function(t){r.observe(t)})):Array.from(a).forEach(function(t){return s(t)})),i&&("IntersectionObserver"in window?(e=new IntersectionObserver(l,c),o(i).map(function(t){e.observe(t)})):Array.from(i).forEach(function(t){return s(t)}))}}}]);